class Solution
{
    static int f(int i,int j,String a,String b,int[][] dp){
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(a.charAt(i)==b.charAt(j)) return dp[i][j]= 1 + f(i-1,j-1,a,b,dp);
        return dp[i][j] = Math.max(f(i-1,j,a,b,dp),f(i,j-1,a,b,dp));
    }
    //Function to find length of shortest common supersequence of two strings.
    public static int shortestCommonSupersequence(String a,String b,int m,int n)
    {
        int[][] dp = new int[m+1][n+1];
        // return (m+n) - f(m-1,n-1,X,Y,dp);
        
        
        for(int i=0;i<m;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<n;i++){
            dp[0][i]=0;
        }
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(a.charAt(i-1)==b.charAt(j-1)){
                    dp[i][j]= 1 + dp[i-1][j-1];
                } 
                else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return (m+n) - dp[m][n];
    }
}
